@*@model string*@
@using System.Configuration
@model IsmIoTPortal.Models.DeviceState

@{
    ViewBag.Title = "Dashboard";
}

<h2 id="test">Loading...</h2>
<h2>@Model.DeviceId</h2>

@*Preview Canvas*@
<div>
    <canvas id="myCanvas" width="800" height="400"></canvas>
</div>

@*Steuerelemente um Device einzustellen*@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Capture Period: ")
                @Html.DropDownListFor(model => model.CapturePeriod,
                                      new SelectList(
                                          new List<Object> {
                                              new { value = 1, text = "1" },
                                              new { value = 2, text = "2" },
                                              new { value = 3, text = "3" },
                                              new { value = 5, text = "5" },
                                              new { value = 10, text = "10" }
                                          },
                                          "value",
                                          "text",
                                          Model.CapturePeriod),
                                          new { @id = "uploaddelay" }
                                          )
            </div>
        </div>

        @*Beispiel für Slider*@
        @*@("Upload Delay: ")
            @Html.TextBoxFor(model => model.UploadDelay, new { @type = "range", min = 1, max = 10 })*@

        @*Matlab Algorithm Properties*@
        <div class="form-group">

            <div class="col-md-10">
                @Html.Label("Variance Threshold: ")
                @Html.TextBoxFor(model => model.VarianceThreshold, new { @id = "variancethresh" })
            </div>
        </div><br />
        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("DistanceMap Threshold: ")
                @Html.TextBoxFor(model => model.DistanceMapThreshold, new { @id = "distmapthresh" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("RG Threshold: ")
                @Html.TextBoxFor(model => model.RGThreshold, new { @id = "rgthresh" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Restricted Filling Threshold: ")
                @Html.TextBoxFor(model => model.RestrictedFillingThreshold, new { @id = "restfilthresh", @type = "range", min = 1, max = 10 })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Dilate Value: ")
                @Html.TextBoxFor(model => model.DilateValue, new { @id = "dilateval", @type = "range", min = 1, max = 32 })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    @*jQuery UI für die Steuerelemente*@
    <link rel="stylesheet" href="~/Content/themes/base/all.css" />
    <script src="~/Scripts/jquery-ui-1.11.4.js"></script>
    <script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>

    <!--SignalR script to update the page and send messages.-->
    <script>
        $(document).ready(function () {
            // Preview Canvas
            //
            var margin = 20;
            var labelSize = 20;
            var imgHeight = 300;
            var imgWidth = 300;

            // Reference the auto-generated proxy for the hub.
            var hub = $.connection.dashboardHub;

            // Register for a Dashboard Group (a SignalR Group named equal to the DeviceId)
            $.connection.hub.start().done(function () {
                hub.server.registerForDashboard('@Model.DeviceId');
            });

            hub.client.updateDashboardControls = function (uploadDelay, varianceThreshold, distanceMapThreshold, rgThreshold,
                restrictedFillingThreshold, DilateValue) {

                $("#test").html("Dashboard");
                $("#uploaddelay").val(uploadDelay);
                // ML
                $("#variancethresh").val(varianceThreshold);
                $("#distmapthresh").val(distanceMapThreshold);
                $("#rgthresh").val(rgThreshold);
                $("#restfilthresh").val(restrictedFillingThreshold);
                $("#dilateval").val(DilateValue);
            };

            // Update Dashboard
            hub.client.updateDashboard = function (blobUri, fc, fl, blobUriColored) {

                // Update the canvas element displaying the image
                var canvas = document.getElementById('myCanvas');

                var context = canvas.getContext('2d');

                var sources = {
                    original: blobUri,
                    colored: blobUriColored
                };

                sources.original.src = blobUri;
                sources.colored.src = blobUriColored;

                loadImages(sources, function (images) {
                    context.drawImage(images.original, 0, 0, 300, 300);
                    context.drawImage(images.colored, 350, 0, 300, 300);

                    // Update fc and fl labels
                    context.clearRect(0, imgHeight, 300, 400 - 300);
                    context.font = labelSize + "px Georgia";
                    context.strokeText("FC: " + fc, margin, imgHeight + margin);
                    context.strokeText("FL: " + fl, margin, imgHeight + margin + labelSize + 20);
                });

            };

            /*
            // Update Dashboard MIT DOUBLE BUFFERING
            // http://blog.bob.sh/2012/12/double-buffering-with-html-5-canvas.html
            hub.client.updateDashboard = function (blobUri, fc, fl, blobUriColored) {

                // Update the canvas element displaying the image
                var mainCanvas = document.getElementById('myCanvas');
                var offscreenCanvas = document.createElement('canvas');
                offscreenCanvas.width = mainCanvas.width;
                offscreenCanvas.height = mainCanvas.height;
                
                ctxOffscreen = offscreenCanvas.getContext('2d');

                var sources = {
                    original: blobUri,
                    colored: blobUriColored
                };

                sources.original.src = blobUri;
                sources.colored.src = blobUriColored;

                loadImages(sources, function (images) {
                    ctxOffscreen.drawImage(images.original, 0, 0, 300, 300);
                    ctxOffscreen.drawImage(images.colored, 350, 0, 300, 300);

                    // Update fc and fl labels
                    ctxOffscreen.clearRect(0, imgHeight, 300, 400 - 300);
                    ctxOffscreen.font = labelSize + "px Georgia";
                    ctxOffscreen.strokeText("FC: " + fc, margin, imgHeight + margin);
                    ctxOffscreen.strokeText("FL: " + fl, margin, imgHeight + margin + labelSize + 20);

                    // flip
                    ctxMain = mainCanvas.getContext('2d');
                    ctxMain.clearRect(0, imgHeight, 300, 400 - 300);
                    ctxMain.drawImage(offscreenCanvas, 0, 0);
                });
            };
            */


            // Erst alle Bilder aus sources fertig laden, dann auf canvas zeichnen
            function loadImages(sources, callback) {
                var images = {};
                var loadedImages = 0;
                var numImages = 0;
                // get num of sources
                for (var src in sources) {
                    numImages++;
                }
                for (var src in sources) {
                    images[src] = new Image();
                    images[src].onload = function () {
                        if (++loadedImages >= numImages) {
                            callback(images);
                        }
                    };
                    images[src].src = sources[src];
                }
            }


            //Steuerelemente um Device einzustellen
            //

        });

        $(window).ready(function () { // hat gut funktioniert
        //$(window).load(function () { // jquery doku sagt aber https://api.jquery.com/load-event/
            @{
                //var commandMessage = new Microsoft.Azure.Devices.Message();
                var commandMessage = new Microsoft.Azure.Devices.Message(System.Text.Encoding.UTF8.GetBytes(CommandType.GET_DEVICE_STATE));
                commandMessage.Properties["command"] = CommandType.GET_DEVICE_STATE;
                commandMessage.MessageId = Guid.NewGuid().ToString();
                //commandMessage.Ack = Microsoft.Azure.Devices.DeliveryAcknowledgement.Full;
                //Microsoft.Azure.Devices.ServiceClient serviceClient = Microsoft.Azure.Devices.ServiceClient.CreateFromConnectionString("HostName=iothubism.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=nhhwSNpr3p68FcTZfvPEfU7xvJRH/jOpTcWQbQMoKAg=");
                Microsoft.Azure.Devices.ServiceClient serviceClient = Microsoft.Azure.Devices.ServiceClient.CreateFromConnectionString(ConfigurationManager.ConnectionStrings["ismiothub"].ConnectionString/*System.Configuration.ConfigurationSettings.AppSettings.Get("ismiothub")*/);
                System.Threading.Tasks.Task.Factory.StartNew(() => serviceClient.SendAsync(Model.DeviceId, commandMessage));
            }
        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}
