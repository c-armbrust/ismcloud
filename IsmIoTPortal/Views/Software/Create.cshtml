@model IsmIoTPortal.Models.SoftwareViewCreate

@{
    ViewBag.Title = "Create";
}

<h2>Create new Release</h2>

<h3>Version Builder</h3>
<div class="row form-inline">
    <div id="automaticselector">
        <div class="form-group col-md-4 col-md-offset-1">
            <label for="software-select">Software Version</label>
            <select class="form-control" id="software-select">
                @foreach (var softwareVersion in Model.SoftwareVersions)
                {
                    <option>
                        @(softwareVersion.Prefix + "-r" + softwareVersion.InternalReleaseNum.Replace(';', '.') + '-' + softwareVersion.Suffix)
                    </option>
                }
                <option>Other</option>
            </select>
        </div>
    </div>
    <div class="form-group col-md-2">
        <label for="sw-release">Release Type</label>
        <select class="form-control" id="sw-release">
            <option>Major release</option>
            <option>Minor release</option>
            <option selected="selected">Patch</option>
        </select>
    </div>
</div>
<div class="row form-inline">
    <div id="manualselector" hidden>
        <div class="form-group col-md-2 col-md-offset-1">
            <label for="sw-prefix">Version</label>
            <input type="text" class="form-control" id="sw-prefix" placeholder="e.g. v-2.0.1">
        </div>
        <div class="form-group col-md-2">
            <label for="sw-suffix">Suffix</label>
            <input type="text" class="form-control" id="sw-suffix" placeholder="e.g. alpha">
        </div>
    </div>
</div>
<h3>Firmware Update</h3>
@using (Html.BeginForm("Create", "Software", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group @(ViewBag.NameError != null?"has-error":"")">
            <label class="control-label col-md-4">
                @(ViewBag.NameError == null ? 
                    "Release Name" : 
                    ViewBag.NameError)
            </label> 
            @*@Html.LabelFor(model => model.SoftwareVersion, htmlAttributes: new { @class = "control-label col-md-4" })*@
            <div class="col-md-6">
                <input class="form-control text-box single-line" id="Release_Name" name="Release.Name" type="text" value=""  readonly="true" />
                @*@Html.EditorFor(model => model.Release.Name, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Release.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group @(ViewBag.FileError != null?"has-error":"")">
            <label class="control-label col-md-4">
                @(ViewBag.FileError == null ? 
                    "BLOB URL: Must be tarfile and contain a script called 'apply.sh'." : 
                    ViewBag.FileError)
            </label>
            <div class="col-md-6">
                <input type="url" id="tarfile" name="blobUrl" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Release.Changelog, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Release.Changelog, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Release.Changelog, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
        <script>
        $(document).ready(function () {
            $('#sw-prefix').on('input', changeInput)
            $('#sw-release').on('input', changeInput)
            $('#sw-suffix').on('input', changeInput)
            $('#software-select').on('input', () => {
                var input = $('#software-select').val()
                if (input == "Other")
                    $("#manualselector").show()
                else 
                    $("#manualselector").hide()
                changeInput()
            });


            changeInput()
            var input = $('#software-select').val()
            if (input == "Other")
                $("#manualselector").show()
            else 
                $("#manualselector").hide()
        });

        function changeInput() {
            var input = $('#software-select').val()
            if (input == "Other") {
                var prefix = $('#sw-prefix').val();
                var release = $('#sw-release').prop('selectedIndex');
                var suffix = $('#sw-suffix').val();

                var softwareVersion = findSoftwareVersion(prefix, suffix);
                var s = prefix ? prefix + '-' : '';
                var releaseNum = [0,0,0];
                if(softwareVersion) {s
                    releaseNum = softwareVersion.CurrentReleaseNum;
                }
                releaseNum[release]++;
                for (var i = release; i < 2; i++)
                    releaseNum[i+1] = 0
                s += 'r' + releaseNum.join('.');
                s += suffix ? '-' + suffix : '';

                $('#Release_Name').val(s);
            } else {
                var softwareVersions = @Html.Raw(Json.Encode(Model.SoftwareVersions));
                var index = $('#software-select').prop('selectedIndex');
                var release = $('#sw-release').prop('selectedIndex');
                var softwareVersion = softwareVersions[index]
                var releaseNum = softwareVersion.CurrentReleaseNum;
                releaseNum[release]++;
                for (var i = release; i < 2; i++)
                    releaseNum[i+1] = 0
                var s = softwareVersion.Prefix + '-r' + releaseNum.join('.');
                s += softwareVersion.Suffix ? '-' + softwareVersion.Suffix : '';
                $('#Release_Name').val(s);
            }
        }

        function findSoftwareVersion(prefix, suffix) {
            var softwareVersions = @Html.Raw(Json.Encode(Model.SoftwareVersions));
            console.log(softwareVersions)
            for(var i = 0; i<softwareVersions.length; i++) {
                if (prefix == softwareVersions[i].Prefix && suffix == softwareVersions[i].Suffix)
                    return softwareVersions[i]
            }
            return null;
        }
    </script>
}
